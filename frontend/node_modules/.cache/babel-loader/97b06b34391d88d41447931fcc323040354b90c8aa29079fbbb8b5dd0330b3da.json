{"ast":null,"code":"import api from './api';\nexport const manufacturingAPI = {\n  // Get all manufacturing orders\n  getManufacturingOrders: async (filters = {}) => {\n    try {\n      const response = await api.get('/manufacturing-orders', {\n        params: filters\n      });\n      return response.data || [];\n    } catch (error) {\n      // Return mock data for demo\n      return [{\n        id: 1,\n        orderId: 'MO-001',\n        product: 'Product 1',\n        quantity: 100,\n        startDate: '2024-01-15',\n        endDate: '2024-01-20',\n        status: 'New',\n        progress: 0,\n        goalDate: '2024-01-20'\n      }, {\n        id: 2,\n        orderId: 'MO-002',\n        product: 'Product 2',\n        quantity: 50,\n        startDate: '2024-01-16',\n        endDate: '2024-01-22',\n        status: 'In Progress',\n        progress: 45,\n        goalDate: '2024-01-22'\n      }, {\n        id: 3,\n        orderId: 'MO-003',\n        product: 'Product 3',\n        quantity: 75,\n        startDate: '2024-01-10',\n        endDate: '2024-01-18',\n        status: 'Completed',\n        progress: 100,\n        goalDate: '2024-01-18'\n      }, {\n        id: 4,\n        orderId: 'MO-004',\n        product: 'Product 4',\n        quantity: 200,\n        startDate: '2024-01-20',\n        endDate: '2024-01-25',\n        status: 'Cancelled',\n        progress: 0,\n        goalDate: '2024-01-25'\n      }];\n    }\n  },\n  // Get manufacturing order by ID\n  getManufacturingOrder: async id => {\n    try {\n      const response = await api.get(`/manufacturing-orders/${id}`);\n      return response.data;\n    } catch (error) {\n      return {\n        id,\n        orderId: `MO-${id}`,\n        product: 'Sample Product',\n        quantity: 100,\n        status: 'New'\n      };\n    }\n  },\n  // Create new manufacturing order\n  createManufacturingOrder: async orderData => {\n    try {\n      const response = await api.post('/manufacturing-orders', orderData);\n      return response.data;\n    } catch (error) {\n      return {\n        ...orderData,\n        id: Date.now(),\n        orderId: `MO-${Date.now()}`\n      };\n    }\n  },\n  // Update manufacturing order\n  updateManufacturingOrder: async (id, orderData) => {\n    try {\n      const response = await api.put(`/manufacturing-orders/${id}`, orderData);\n      return response.data;\n    } catch (error) {\n      return {\n        ...orderData,\n        id\n      };\n    }\n  },\n  // Confirm manufacturing order\n  confirmManufacturingOrder: async id => {\n    try {\n      const response = await api.post(`/manufacturing-orders/${id}/confirm`);\n      return response.data;\n    } catch (error) {\n      return {\n        id,\n        status: 'Confirmed'\n      };\n    }\n  },\n  // Start manufacturing order\n  startManufacturingOrder: async id => {\n    try {\n      const response = await api.post(`/manufacturing-orders/${id}/start`);\n      return response.data;\n    } catch (error) {\n      return {\n        id,\n        status: 'In Progress'\n      };\n    }\n  },\n  // Cancel manufacturing order\n  cancelManufacturingOrder: async id => {\n    try {\n      const response = await api.post(`/manufacturing-orders/${id}/cancel`);\n      return response.data;\n    } catch (error) {\n      return {\n        id,\n        status: 'Cancelled'\n      };\n    }\n  },\n  // Get work orders for manufacturing order\n  getWorkOrders: async manufacturingOrderId => {\n    try {\n      const response = await api.get(`/manufacturing-orders/${manufacturingOrderId}/work-orders`);\n      return response.data || [];\n    } catch (error) {\n      return [];\n    }\n  },\n  // Get dashboard data\n  getDashboardData: async () => {\n    try {\n      const response = await api.get('/dashboard');\n      return response.data;\n    } catch (error) {\n      return {\n        manufacturingOrders: [{\n          id: 1,\n          orderId: 'MO-001',\n          product: 'Product 1',\n          quantity: 100,\n          startDate: '2024-01-15',\n          endDate: '2024-01-20',\n          status: 'In Progress'\n        }, {\n          id: 2,\n          orderId: 'MO-002',\n          product: 'Product 2',\n          quantity: 50,\n          startDate: '2024-01-16',\n          endDate: '2024-01-22',\n          status: 'Pending'\n        }, {\n          id: 3,\n          orderId: 'MO-003',\n          product: 'Product 3',\n          quantity: 75,\n          startDate: '2024-01-10',\n          endDate: '2024-01-18',\n          status: 'Completed'\n        }],\n        workOrders: [{\n          id: 1,\n          operation: 'Work Order 1',\n          workCenter: 'Work Center 1',\n          product: 'Product 1',\n          quantity: 3,\n          expectedDuration: 180,\n          realDuration: 0,\n          status: 'In Time'\n        }, {\n          id: 2,\n          operation: 'Work Order 2',\n          workCenter: 'Work Center 2',\n          product: 'Product 2',\n          quantity: 2,\n          expectedDuration: 120,\n          realDuration: 0,\n          status: 'In Time'\n        }],\n        summary: {\n          totalOrders: 3,\n          activeOrders: 2,\n          completedOrders: 1,\n          totalValue: 15000\n        }\n      };\n    }\n  }\n};","map":{"version":3,"names":["api","manufacturingAPI","getManufacturingOrders","filters","response","get","params","data","error","id","orderId","product","quantity","startDate","endDate","status","progress","goalDate","getManufacturingOrder","createManufacturingOrder","orderData","post","Date","now","updateManufacturingOrder","put","confirmManufacturingOrder","startManufacturingOrder","cancelManufacturingOrder","getWorkOrders","manufacturingOrderId","getDashboardData","manufacturingOrders","workOrders","operation","workCenter","expectedDuration","realDuration","summary","totalOrders","activeOrders","completedOrders","totalValue"],"sources":["F:/odoooo/odooxnmit/frontend/src/services/manufacturingAPI.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const manufacturingAPI = {\r\n  // Get all manufacturing orders\r\n  getManufacturingOrders: async (filters = {}) => {\r\n    try {\r\n      const response = await api.get('/manufacturing-orders', { params: filters });\r\n      return response.data || [];\r\n    } catch (error) {\r\n      // Return mock data for demo\r\n      return [\r\n        { id: 1, orderId: 'MO-001', product: 'Product 1', quantity: 100, startDate: '2024-01-15', endDate: '2024-01-20', status: 'New', progress: 0, goalDate: '2024-01-20' },\r\n        { id: 2, orderId: 'MO-002', product: 'Product 2', quantity: 50, startDate: '2024-01-16', endDate: '2024-01-22', status: 'In Progress', progress: 45, goalDate: '2024-01-22' },\r\n        { id: 3, orderId: 'MO-003', product: 'Product 3', quantity: 75, startDate: '2024-01-10', endDate: '2024-01-18', status: 'Completed', progress: 100, goalDate: '2024-01-18' },\r\n        { id: 4, orderId: 'MO-004', product: 'Product 4', quantity: 200, startDate: '2024-01-20', endDate: '2024-01-25', status: 'Cancelled', progress: 0, goalDate: '2024-01-25' }\r\n      ];\r\n    }\r\n  },\r\n\r\n  // Get manufacturing order by ID\r\n  getManufacturingOrder: async (id) => {\r\n    try {\r\n      const response = await api.get(`/manufacturing-orders/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      return { id, orderId: `MO-${id}`, product: 'Sample Product', quantity: 100, status: 'New' };\r\n    }\r\n  },\r\n\r\n  // Create new manufacturing order\r\n  createManufacturingOrder: async (orderData) => {\r\n    try {\r\n      const response = await api.post('/manufacturing-orders', orderData);\r\n      return response.data;\r\n    } catch (error) {\r\n      return { ...orderData, id: Date.now(), orderId: `MO-${Date.now()}` };\r\n    }\r\n  },\r\n\r\n  // Update manufacturing order\r\n  updateManufacturingOrder: async (id, orderData) => {\r\n    try {\r\n      const response = await api.put(`/manufacturing-orders/${id}`, orderData);\r\n      return response.data;\r\n    } catch (error) {\r\n      return { ...orderData, id };\r\n    }\r\n  },\r\n\r\n  // Confirm manufacturing order\r\n  confirmManufacturingOrder: async (id) => {\r\n    try {\r\n      const response = await api.post(`/manufacturing-orders/${id}/confirm`);\r\n      return response.data;\r\n    } catch (error) {\r\n      return { id, status: 'Confirmed' };\r\n    }\r\n  },\r\n\r\n  // Start manufacturing order\r\n  startManufacturingOrder: async (id) => {\r\n    try {\r\n      const response = await api.post(`/manufacturing-orders/${id}/start`);\r\n      return response.data;\r\n    } catch (error) {\r\n      return { id, status: 'In Progress' };\r\n    }\r\n  },\r\n\r\n  // Cancel manufacturing order\r\n  cancelManufacturingOrder: async (id) => {\r\n    try {\r\n      const response = await api.post(`/manufacturing-orders/${id}/cancel`);\r\n      return response.data;\r\n    } catch (error) {\r\n      return { id, status: 'Cancelled' };\r\n    }\r\n  },\r\n\r\n  // Get work orders for manufacturing order\r\n  getWorkOrders: async (manufacturingOrderId) => {\r\n    try {\r\n      const response = await api.get(`/manufacturing-orders/${manufacturingOrderId}/work-orders`);\r\n      return response.data || [];\r\n    } catch (error) {\r\n      return [];\r\n    }\r\n  },\r\n\r\n  // Get dashboard data\r\n  getDashboardData: async () => {\r\n    try {\r\n      const response = await api.get('/dashboard');\r\n      return response.data;\r\n    } catch (error) {\r\n      return {\r\n        manufacturingOrders: [\r\n          { id: 1, orderId: 'MO-001', product: 'Product 1', quantity: 100, startDate: '2024-01-15', endDate: '2024-01-20', status: 'In Progress' },\r\n          { id: 2, orderId: 'MO-002', product: 'Product 2', quantity: 50, startDate: '2024-01-16', endDate: '2024-01-22', status: 'Pending' },\r\n          { id: 3, orderId: 'MO-003', product: 'Product 3', quantity: 75, startDate: '2024-01-10', endDate: '2024-01-18', status: 'Completed' }\r\n        ],\r\n        workOrders: [\r\n          { id: 1, operation: 'Work Order 1', workCenter: 'Work Center 1', product: 'Product 1', quantity: 3, expectedDuration: 180, realDuration: 0, status: 'In Time' },\r\n          { id: 2, operation: 'Work Order 2', workCenter: 'Work Center 2', product: 'Product 2', quantity: 2, expectedDuration: 120, realDuration: 0, status: 'In Time' }\r\n        ],\r\n        summary: {\r\n          totalOrders: 3,\r\n          activeOrders: 2,\r\n          completedOrders: 1,\r\n          totalValue: 15000\r\n        }\r\n      };\r\n    }\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,gBAAgB,GAAG;EAC9B;EACAC,sBAAsB,EAAE,MAAAA,CAAOC,OAAO,GAAG,CAAC,CAAC,KAAK;IAC9C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,uBAAuB,EAAE;QAAEC,MAAM,EAAEH;MAAQ,CAAC,CAAC;MAC5E,OAAOC,QAAQ,CAACG,IAAI,IAAI,EAAE;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd;MACA,OAAO,CACL;QAAEC,EAAE,EAAE,CAAC;QAAEC,OAAO,EAAE,QAAQ;QAAEC,OAAO,EAAE,WAAW;QAAEC,QAAQ,EAAE,GAAG;QAAEC,SAAS,EAAE,YAAY;QAAEC,OAAO,EAAE,YAAY;QAAEC,MAAM,EAAE,KAAK;QAAEC,QAAQ,EAAE,CAAC;QAAEC,QAAQ,EAAE;MAAa,CAAC,EACrK;QAAER,EAAE,EAAE,CAAC;QAAEC,OAAO,EAAE,QAAQ;QAAEC,OAAO,EAAE,WAAW;QAAEC,QAAQ,EAAE,EAAE;QAAEC,SAAS,EAAE,YAAY;QAAEC,OAAO,EAAE,YAAY;QAAEC,MAAM,EAAE,aAAa;QAAEC,QAAQ,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAa,CAAC,EAC7K;QAAER,EAAE,EAAE,CAAC;QAAEC,OAAO,EAAE,QAAQ;QAAEC,OAAO,EAAE,WAAW;QAAEC,QAAQ,EAAE,EAAE;QAAEC,SAAS,EAAE,YAAY;QAAEC,OAAO,EAAE,YAAY;QAAEC,MAAM,EAAE,WAAW;QAAEC,QAAQ,EAAE,GAAG;QAAEC,QAAQ,EAAE;MAAa,CAAC,EAC5K;QAAER,EAAE,EAAE,CAAC;QAAEC,OAAO,EAAE,QAAQ;QAAEC,OAAO,EAAE,WAAW;QAAEC,QAAQ,EAAE,GAAG;QAAEC,SAAS,EAAE,YAAY;QAAEC,OAAO,EAAE,YAAY;QAAEC,MAAM,EAAE,WAAW;QAAEC,QAAQ,EAAE,CAAC;QAAEC,QAAQ,EAAE;MAAa,CAAC,CAC5K;IACH;EACF,CAAC;EAED;EACAC,qBAAqB,EAAE,MAAOT,EAAE,IAAK;IACnC,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,yBAAyBI,EAAE,EAAE,CAAC;MAC7D,OAAOL,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QAAEC,EAAE;QAAEC,OAAO,EAAE,MAAMD,EAAE,EAAE;QAAEE,OAAO,EAAE,gBAAgB;QAAEC,QAAQ,EAAE,GAAG;QAAEG,MAAM,EAAE;MAAM,CAAC;IAC7F;EACF,CAAC;EAED;EACAI,wBAAwB,EAAE,MAAOC,SAAS,IAAK;IAC7C,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAMJ,GAAG,CAACqB,IAAI,CAAC,uBAAuB,EAAED,SAAS,CAAC;MACnE,OAAOhB,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QAAE,GAAGY,SAAS;QAAEX,EAAE,EAAEa,IAAI,CAACC,GAAG,CAAC,CAAC;QAAEb,OAAO,EAAE,MAAMY,IAAI,CAACC,GAAG,CAAC,CAAC;MAAG,CAAC;IACtE;EACF,CAAC;EAED;EACAC,wBAAwB,EAAE,MAAAA,CAAOf,EAAE,EAAEW,SAAS,KAAK;IACjD,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAMJ,GAAG,CAACyB,GAAG,CAAC,yBAAyBhB,EAAE,EAAE,EAAEW,SAAS,CAAC;MACxE,OAAOhB,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QAAE,GAAGY,SAAS;QAAEX;MAAG,CAAC;IAC7B;EACF,CAAC;EAED;EACAiB,yBAAyB,EAAE,MAAOjB,EAAE,IAAK;IACvC,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMJ,GAAG,CAACqB,IAAI,CAAC,yBAAyBZ,EAAE,UAAU,CAAC;MACtE,OAAOL,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QAAEC,EAAE;QAAEM,MAAM,EAAE;MAAY,CAAC;IACpC;EACF,CAAC;EAED;EACAY,uBAAuB,EAAE,MAAOlB,EAAE,IAAK;IACrC,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMJ,GAAG,CAACqB,IAAI,CAAC,yBAAyBZ,EAAE,QAAQ,CAAC;MACpE,OAAOL,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QAAEC,EAAE;QAAEM,MAAM,EAAE;MAAc,CAAC;IACtC;EACF,CAAC;EAED;EACAa,wBAAwB,EAAE,MAAOnB,EAAE,IAAK;IACtC,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMJ,GAAG,CAACqB,IAAI,CAAC,yBAAyBZ,EAAE,SAAS,CAAC;MACrE,OAAOL,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QAAEC,EAAE;QAAEM,MAAM,EAAE;MAAY,CAAC;IACpC;EACF,CAAC;EAED;EACAc,aAAa,EAAE,MAAOC,oBAAoB,IAAK;IAC7C,IAAI;MACF,MAAM1B,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,yBAAyByB,oBAAoB,cAAc,CAAC;MAC3F,OAAO1B,QAAQ,CAACG,IAAI,IAAI,EAAE;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO,EAAE;IACX;EACF,CAAC;EAED;EACAuB,gBAAgB,EAAE,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAM3B,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,YAAY,CAAC;MAC5C,OAAOD,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QACLwB,mBAAmB,EAAE,CACnB;UAAEvB,EAAE,EAAE,CAAC;UAAEC,OAAO,EAAE,QAAQ;UAAEC,OAAO,EAAE,WAAW;UAAEC,QAAQ,EAAE,GAAG;UAAEC,SAAS,EAAE,YAAY;UAAEC,OAAO,EAAE,YAAY;UAAEC,MAAM,EAAE;QAAc,CAAC,EACxI;UAAEN,EAAE,EAAE,CAAC;UAAEC,OAAO,EAAE,QAAQ;UAAEC,OAAO,EAAE,WAAW;UAAEC,QAAQ,EAAE,EAAE;UAAEC,SAAS,EAAE,YAAY;UAAEC,OAAO,EAAE,YAAY;UAAEC,MAAM,EAAE;QAAU,CAAC,EACnI;UAAEN,EAAE,EAAE,CAAC;UAAEC,OAAO,EAAE,QAAQ;UAAEC,OAAO,EAAE,WAAW;UAAEC,QAAQ,EAAE,EAAE;UAAEC,SAAS,EAAE,YAAY;UAAEC,OAAO,EAAE,YAAY;UAAEC,MAAM,EAAE;QAAY,CAAC,CACtI;QACDkB,UAAU,EAAE,CACV;UAAExB,EAAE,EAAE,CAAC;UAAEyB,SAAS,EAAE,cAAc;UAAEC,UAAU,EAAE,eAAe;UAAExB,OAAO,EAAE,WAAW;UAAEC,QAAQ,EAAE,CAAC;UAAEwB,gBAAgB,EAAE,GAAG;UAAEC,YAAY,EAAE,CAAC;UAAEtB,MAAM,EAAE;QAAU,CAAC,EAC/J;UAAEN,EAAE,EAAE,CAAC;UAAEyB,SAAS,EAAE,cAAc;UAAEC,UAAU,EAAE,eAAe;UAAExB,OAAO,EAAE,WAAW;UAAEC,QAAQ,EAAE,CAAC;UAAEwB,gBAAgB,EAAE,GAAG;UAAEC,YAAY,EAAE,CAAC;UAAEtB,MAAM,EAAE;QAAU,CAAC,CAChK;QACDuB,OAAO,EAAE;UACPC,WAAW,EAAE,CAAC;UACdC,YAAY,EAAE,CAAC;UACfC,eAAe,EAAE,CAAC;UAClBC,UAAU,EAAE;QACd;MACF,CAAC;IACH;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}