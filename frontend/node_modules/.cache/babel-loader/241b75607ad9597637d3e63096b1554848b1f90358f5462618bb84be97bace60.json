{"ast":null,"code":"import api from \"./api\";\nexport const stockAPI = {\n  // Get all stock items\n  getStockItems: async (filters = {}) => {\n    try {\n      const response = await api.get(\"/stock\", {\n        params: filters\n      });\n      return response.data || [];\n    } catch (error) {\n      console.error(\"Error fetching stock items:\", error);\n      return [];\n    }\n  },\n  // Get stock item by ID\n  getStockItem: async id => {\n    try {\n      const response = await api.get(`/stock/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error fetching stock item:\", error);\n      return null;\n    }\n  },\n  // Create new stock item\n  createStockItem: async stockData => {\n    try {\n      const response = await api.post(\"/stock\", stockData);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error creating stock item:\", error);\n      throw error;\n    }\n  },\n  // Update stock item\n  updateStockItem: async (id, stockData) => {\n    try {\n      const response = await api.put(`/stock/${id}`, stockData);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error updating stock item:\", error);\n      throw error;\n    }\n  },\n  // Delete stock item\n  deleteStockItem: async id => {\n    try {\n      const response = await api.delete(`/stock/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error deleting stock item:\", error);\n      throw error;\n    }\n  },\n  // Get BOM list\n  getBillsOfMaterials: async (filters = {}) => {\n    try {\n      const response = await api.get(\"/bom\", {\n        params: filters\n      });\n      return response.data || [];\n    } catch (error) {\n      console.error(\"Error fetching BOMs:\", error);\n      return [];\n    }\n  },\n  // Get BOM by ID\n  getBillOfMaterials: async id => {\n    try {\n      const response = await api.get(`/bom/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error fetching BOM:\", error);\n      return null;\n    }\n  },\n  // Create BOM\n  createBillOfMaterials: async bomData => {\n    try {\n      const response = await api.post(\"/bom\", bomData);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error creating BOM:\", error);\n      throw error;\n    }\n  },\n  // Update BOM\n  updateBillOfMaterials: async (id, bomData) => {\n    try {\n      const response = await api.put(`/bom/${id}`, bomData);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error updating BOM:\", error);\n      throw error;\n    }\n  },\n  // Delete BOM\n  deleteBillOfMaterials: async id => {\n    try {\n      const response = await api.delete(`/bom/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error deleting BOM:\", error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["api","stockAPI","getStockItems","filters","response","get","params","data","error","console","getStockItem","id","createStockItem","stockData","post","updateStockItem","put","deleteStockItem","delete","getBillsOfMaterials","getBillOfMaterials","createBillOfMaterials","bomData","updateBillOfMaterials","deleteBillOfMaterials"],"sources":["C:/Users/Sahana Madival/OneDrive/Desktop/odooxnmit/frontend/src/services/stockAPI.js"],"sourcesContent":["import api from \"./api\";\r\n\r\nexport const stockAPI = {\r\n  // Get all stock items\r\n  getStockItems: async (filters = {}) => {\r\n    try {\r\n      const response = await api.get(\"/stock\", { params: filters });\r\n      return response.data || [];\r\n    } catch (error) {\r\n      console.error(\"Error fetching stock items:\", error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  // Get stock item by ID\r\n  getStockItem: async (id) => {\r\n    try {\r\n      const response = await api.get(`/stock/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error fetching stock item:\", error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  // Create new stock item\r\n  createStockItem: async (stockData) => {\r\n    try {\r\n      const response = await api.post(\"/stock\", stockData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error creating stock item:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update stock item\r\n  updateStockItem: async (id, stockData) => {\r\n    try {\r\n      const response = await api.put(`/stock/${id}`, stockData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error updating stock item:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete stock item\r\n  deleteStockItem: async (id) => {\r\n    try {\r\n      const response = await api.delete(`/stock/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error deleting stock item:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get BOM list\r\n  getBillsOfMaterials: async (filters = {}) => {\r\n    try {\r\n      const response = await api.get(\"/bom\", { params: filters });\r\n      return response.data || [];\r\n    } catch (error) {\r\n      console.error(\"Error fetching BOMs:\", error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  // Get BOM by ID\r\n  getBillOfMaterials: async (id) => {\r\n    try {\r\n      const response = await api.get(`/bom/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error fetching BOM:\", error);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  // Create BOM\r\n  createBillOfMaterials: async (bomData) => {\r\n    try {\r\n      const response = await api.post(\"/bom\", bomData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error creating BOM:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update BOM\r\n  updateBillOfMaterials: async (id, bomData) => {\r\n    try {\r\n      const response = await api.put(`/bom/${id}`, bomData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error updating BOM:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete BOM\r\n  deleteBillOfMaterials: async (id) => {\r\n    try {\r\n      const response = await api.delete(`/bom/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"Error deleting BOM:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}